name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: |
        # Создаем папку для статических файлов
        mkdir -p dist
        
        # Копируем основные файлы
        cp index.html dist/
        cp -r src/public dist/
        cp schedule.json dist/
        
        # Создаем простой сервер для GitHub Pages
        cat > dist/server.js << 'EOF'
        const express = require('express');
        const path = require('path');
        const fs = require('fs');
        
        const app = express();
        const PORT = process.env.PORT || 3000;
        
        app.use(express.static('.'));
        app.use(express.json());
        
        // API для получения данных расписания
        app.get('/api/schedule', (req, res) => {
          try {
            const scheduleData = JSON.parse(fs.readFileSync('schedule.json', 'utf8'));
            res.json(scheduleData);
          } catch (error) {
            res.status(500).json({ error: 'Данные расписания недоступны' });
          }
        });
        
        // API для получения уникальных городов
        app.get('/api/cities', (req, res) => {
          try {
            const scheduleData = JSON.parse(fs.readFileSync('schedule.json', 'utf8'));
            
            const cities = new Set();
            const routes = [];
            
            scheduleData.response.flight.forEach(flight => {
              if (flight.period && Array.isArray(flight.period)) {
                flight.period.forEach(period => {
                  if (period.segment && Array.isArray(period.segment)) {
                    period.segment.forEach(segment => {
                      if (segment.city) {
                        cities.add(segment.city);
                      }
                    });
                    
                    // Создаем маршруты
                    for (let i = 0; i < period.segment.length - 1; i++) {
                      const from = period.segment[i].city;
                      const to = period.segment[i + 1].city;
                      if (from && to) {
                        routes.push({
                          from,
                          to,
                          flightNumber: flight['@num'],
                          frequency: period['@freq'],
                          days: period['@freq'].split('').map(day => parseInt(day))
                        });
                      }
                    }
                  }
                });
              } else if (flight.period && flight.period.segment) {
                // Обработка случая с одним периодом
                flight.period.segment.forEach(segment => {
                  if (segment.city) {
                    cities.add(segment.city);
                  }
                });
                
                // Создаем маршруты
                for (let i = 0; i < flight.period.segment.length - 1; i++) {
                  const from = flight.period.segment[i].city;
                  const to = flight.period.segment[i + 1].city;
                  if (from && to) {
                    routes.push({
                      from,
                      to,
                      flightNumber: flight['@num'],
                      frequency: flight.period['@freq'],
                      days: flight.period['@freq'].split('').map(day => parseInt(day))
                    });
                  }
                }
              }
            });
            
            res.json({
              cities: Array.from(cities),
              routes: routes
            });
          } catch (error) {
            res.status(500).json({ error: 'Данные расписания недоступны' });
          }
        });
        
        // Все остальные запросы направляем на index.html
        app.get('*', (req, res) => {
          res.sendFile(path.join(__dirname, 'index.html'));
        });
        
        app.listen(PORT, () => {
          console.log(`Server running on port ${PORT}`);
        });
        EOF
        
        # Копируем package.json в dist
        cp package.json dist/
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
