/**
 * @file: static-app.js
 * @description: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è GitHub Pages
 * @dependencies: three.js
 * @created: 2024-12-19
 */

// –î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–æ–≤ –Æ—Ç—ç–π—Ä
const cityCodes = {
    '–°–£–†': { name: '–°—É—Ä–≥—É—Ç', lat: 61.25, lng: 73.4, country: '–†–æ—Å—Å–∏—è' },
    '–¢–Æ–ú': { name: '–¢—é–º–µ–Ω—å', lat: 57.15, lng: 65.53, country: '–†–æ—Å—Å–∏—è' },
    '–£–§–ê': { name: '–£—Ñ–∞', lat: 54.73, lng: 55.95, country: '–†–æ—Å—Å–∏—è' },
    '–ï–ö–ë': { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', lat: 56.84, lng: 60.61, country: '–†–æ—Å—Å–∏—è' },
    '–ú–û–°': { name: '–ú–æ—Å–∫–≤–∞', lat: 55.75, lng: 37.62, country: '–†–æ—Å—Å–∏—è' },
    '–°–ü–ë': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', lat: 59.93, lng: 30.34, country: '–†–æ—Å—Å–∏—è' },
    '–ù–û–í': { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', lat: 55.01, lng: 82.93, country: '–†–æ—Å—Å–∏—è' },
    '–ö–†–ê': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', lat: 56.01, lng: 92.87, country: '–†–æ—Å—Å–∏—è' },
    '–ò–†–ö': { name: '–ò—Ä–∫—É—Ç—Å–∫', lat: 52.3, lng: 104.3, country: '–†–æ—Å—Å–∏—è' },
    '–í–õ–ê': { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', lat: 43.11, lng: 131.87, country: '–†–æ—Å—Å–∏—è' },
    '–ö–ê–ó': { name: '–ö–∞–∑–∞–Ω—å', lat: 55.83, lng: 49.07, country: '–†–æ—Å—Å–∏—è' },
    '–°–ê–ú': { name: '–°–∞–º–∞—Ä–∞', lat: 53.2, lng: 50.15, country: '–†–æ—Å—Å–∏—è' },
    '–í–û–õ': { name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥', lat: 48.7, lng: 44.52, country: '–†–æ—Å—Å–∏—è' },
    '–†–û–°': { name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', lat: 47.23, lng: 39.7, country: '–†–æ—Å—Å–∏—è' },
    '–ö–†–ê–°': { name: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', lat: 45.04, lng: 38.98, country: '–†–æ—Å—Å–∏—è' },
    '–°–û–ß': { name: '–°–æ—á–∏', lat: 43.59, lng: 39.72, country: '–†–æ—Å—Å–∏—è' }
};

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ API)
const sampleRoutes = [
    { from: '–°–£–†', to: '–¢–Æ–ú', flightNumber: '101', days: [1,2,3,4,5,6,7] },
    { from: '–¢–Æ–ú', to: '–°–£–†', flightNumber: '102', days: [1,2,3,4,5,6,7] },
    { from: '–°–£–†', to: '–£–§–ê', flightNumber: '103', days: [1,2,3,4,5,6,7] },
    { from: '–£–§–ê', to: '–°–£–†', flightNumber: '104', days: [1,2,3,4,5,6,7] },
    { from: '–£–§–ê', to: '–ï–ö–ë', flightNumber: '105', days: [1,2,3,4,5,6,7] },
    { from: '–ï–ö–ë', to: '–£–§–ê', flightNumber: '106', days: [1,2,3,4,5,6,7] },
    { from: '–ï–ö–ë', to: '–°–£–†', flightNumber: '107', days: [1,2,3,4,5,6,7] },
    { from: '–°–£–†', to: '–ï–ö–ë', flightNumber: '108', days: [1,2,3,4,5,6,7] },
    { from: '–ú–û–°', to: '–°–ü–ë', flightNumber: '201', days: [1,2,3,4,5,6,7] },
    { from: '–°–ü–ë', to: '–ú–û–°', flightNumber: '202', days: [1,2,3,4,5,6,7] },
    { from: '–ú–û–°', to: '–ï–ö–ë', flightNumber: '203', days: [1,2,3,4,5,6,7] },
    { from: '–ï–ö–ë', to: '–ú–û–°', flightNumber: '204', days: [1,2,3,4,5,6,7] },
    { from: '–ù–û–í', to: '–ö–†–ê', flightNumber: '301', days: [1,2,3,4,5,6,7] },
    { from: '–ö–†–ê', to: '–ù–û–í', flightNumber: '302', days: [1,2,3,4,5,6,7] },
    { from: '–ò–†–ö', to: '–í–õ–ê', flightNumber: '401', days: [1,2,3,4,5,6,7] },
    { from: '–í–õ–ê', to: '–ò–†–ö', flightNumber: '402', days: [1,2,3,4,5,6,7] }
];

class StaticFlightVisualizationApp {
    constructor() {
        this.globe = null;
        this.citiesData = Object.keys(cityCodes);
        this.routesData = sampleRoutes;
        this.selectedDays = [1, 2, 3, 4, 5, 6, 7];
        this.selectedCity = null;
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –°–æ–∑–¥–∞–µ–º 3D –≥–ª–æ–±—É—Å
        this.globe = new Globe3D('globe-container');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
        this.addCitiesToGlobe();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        this.addRoutesToGlobe();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.setupUI();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.hideLoading();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStats();
        
        console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }
    
    addCitiesToGlobe() {
        console.log('üèôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É...');
        
        this.citiesData.forEach(cityCode => {
            const cityInfo = cityCodes[cityCode];
            if (cityInfo) {
                this.globe.addCity({
                    name: cityInfo.name,
                    lat: cityInfo.lat,
                    lng: cityInfo.lng,
                    isUtair: true
                });
            }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–∏—Ü—ã —Å—Ç—Ä–∞–Ω
        this.addCapitalCities();
    }
    
    addCapitalCities() {
        const capitals = [
            { name: '–ê—Å—Ç–∞–Ω–∞', lat: 51.18, lng: 71.45, country: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
            { name: '–ë–∏—à–∫–µ–∫', lat: 42.87, lng: 74.59, country: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω' },
            { name: '–¢–∞—à–∫–µ–Ω—Ç', lat: 41.31, lng: 69.24, country: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω' },
            { name: '–î—É—à–∞–Ω–±–µ', lat: 38.54, lng: 68.78, country: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω' },
            { name: '–ê—à—Ö–∞–±–∞–¥', lat: 37.95, lng: 58.38, country: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω' },
            { name: '–ë–∞–∫—É', lat: 40.41, lng: 49.87, country: '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω' },
            { name: '–ï—Ä–µ–≤–∞–Ω', lat: 40.18, lng: 44.51, country: '–ê—Ä–º–µ–Ω–∏—è' },
            { name: '–¢–±–∏–ª–∏—Å–∏', lat: 41.72, lng: 44.78, country: '–ì—Ä—É–∑–∏—è' },
            { name: '–ú–∏–Ω—Å–∫', lat: 53.9, lng: 27.57, country: '–ë–µ–ª–∞—Ä—É—Å—å' },
            { name: '–ö–∏–µ–≤', lat: 50.45, lng: 30.52, country: '–£–∫—Ä–∞–∏–Ω–∞' }
        ];
        
        capitals.forEach(capital => {
            this.globe.addCity({
                name: capital.name,
                lat: capital.lat,
                lng: capital.lng,
                isUtair: false
            });
        });
    }
    
    addRoutesToGlobe() {
        console.log('‚úàÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
        
        this.routesData.forEach(route => {
            const fromCity = cityCodes[route.from];
            const toCity = cityCodes[route.to];
            
            if (fromCity && toCity) {
                this.globe.addRoute({
                    from: fromCity.name,
                    to: toCity.name,
                    fromCoords: { lat: fromCity.lat, lng: fromCity.lng },
                    toCoords: { lat: toCity.lat, lng: toCity.lng },
                    ...route
                });
            }
        });
    }
    
    setupUI() {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const toggleBtn = document.getElementById('toggle-filters');
        const filterPanel = document.getElementById('filter-panel');
        
        toggleBtn.addEventListener('click', () => {
            filterPanel.classList.toggle('collapsed');
            toggleBtn.textContent = filterPanel.classList.contains('collapsed') ? '+' : '‚àí';
        });
        
        // –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        const dayCheckboxes = document.querySelectorAll('.day-checkbox input');
        dayCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.updateDayFilters();
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –≥–æ—Ä–æ–¥–∞
        this.setupCityHover();
    }
    
    updateDayFilters() {
        const selectedDays = [];
        const dayCheckboxes = document.querySelectorAll('.day-checkbox input:checked');
        
        dayCheckboxes.forEach(checkbox => {
            selectedDays.push(parseInt(checkbox.dataset.day));
        });
        
        this.selectedDays = selectedDays;
        this.globe.filterByDays(selectedDays);
        
        console.log('üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–Ω—è–º –æ–±–Ω–æ–≤–ª–µ–Ω:', selectedDays);
    }
    
    setupCityHover() {
        const canvas = document.getElementById('globe-canvas');
        const raycaster = new THREE.Raycaster();
        const mouse = new THREE.Vector2();
        
        canvas.addEventListener('mousemove', (event) => {
            const rect = canvas.getBoundingClientRect();
            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
            
            raycaster.setFromCamera(mouse, this.globe.camera);
            const intersects = raycaster.intersectObjects(this.globe.cities);
            
            if (intersects.length > 0) {
                const city = intersects[0].object;
                this.highlightCity(city.userData.name);
                this.showCityInfo(city.userData);
            } else {
                this.hideCityInfo();
            }
        });
    }
    
    highlightCity(cityName) {
        this.globe.highlightCity(cityName);
        this.selectedCity = cityName;
    }
    
    showCityInfo(cityData) {
        const infoPanel = document.getElementById('info-panel');
        const cityName = document.getElementById('city-name');
        const cityInfo = document.getElementById('city-info');
        
        cityName.textContent = cityData.name;
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        const cityRoutes = this.routesData.filter(route => 
            route.from === cityData.name || route.to === cityData.name
        );
        
        let infoHTML = `<p><strong>–°—Ç—Ä–∞–Ω–∞:</strong> ${cityData.country || '–†–æ—Å—Å–∏—è'}</p>`;
        infoHTML += `<p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${cityData.lat.toFixed(2)}¬∞, ${cityData.lng.toFixed(2)}¬∞</p>`;
        
        if (cityRoutes.length > 0) {
            infoHTML += `<p><strong>–ú–∞—Ä—à—Ä—É—Ç—ã:</strong> ${cityRoutes.length}</p>`;
            infoHTML += '<ul>';
            cityRoutes.forEach(route => {
                const direction = route.from === cityData.name ? '‚Üí' : '‚Üê';
                const destination = route.from === cityData.name ? route.to : route.from;
                infoHTML += `<li>${direction} ${destination} (—Ä–µ–π—Å ${route.flightNumber})</li>`;
            });
            infoHTML += '</ul>';
        }
        
        cityInfo.innerHTML = infoHTML;
        infoPanel.classList.add('visible');
    }
    
    hideCityInfo() {
        const infoPanel = document.getElementById('info-panel');
        infoPanel.classList.remove('visible');
        this.selectedCity = null;
    }
    
    updateStats() {
        document.getElementById('cities-count').textContent = this.citiesData.length;
        document.getElementById('routes-count').textContent = this.routesData.length;
    }
    
    hideLoading() {
        const loading = document.getElementById('loading');
        loading.style.display = 'none';
    }
}

// –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåç –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ—Ç–æ–≤...');
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ Three.js
    if (typeof THREE === 'undefined') {
        console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ Three.js...');
        const checkThree = setInterval(() => {
            if (typeof THREE !== 'undefined') {
                clearInterval(checkThree);
                console.log('‚úÖ Three.js –∑–∞–≥—Ä—É–∂–µ–Ω');
                new StaticFlightVisualizationApp();
            }
        }, 100);
    } else {
        new StaticFlightVisualizationApp();
    }
});
